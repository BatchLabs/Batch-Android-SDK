apply plugin: 'jacoco'

configurations {
    jacocoAnt
    jacocoRuntime
}

jacoco {
    toolVersion = '0.8.5'
}

def offline_instrumented_outputDir = "$buildDir.path/intermediates/classes-instrumented/debug"

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

/* This task is used to create offline instrumentation of classes for on-the-fly instrumentation coverage tool like Jacoco. See jacoco classId
 * and Offline Instrumentation from the jacoco site for more info.
 *
 * In this case, some classes mocked using PowerMock were reported as 0% coverage on jacoco & Sonarqube. The issue between PowerMock and jacoco
 * is well documented, and a possible solution is offline Instrumentation (not so well documented for gradle).
 *
 * In a nutshell, this task:
 *  - Pre-instruments the original *.class files
 *  - Puts the instrumented classes path at the beginning of the task's classpath (for report purposes)
 *  - Runs test & generates a new exec file based on the pre-instrumented classes -- as opposed to on-the-fly instrumented class files generated by jacoco.
 *
 *  Usage: gradle clean & gradle testDebugCoverageUnitTest
 */
task testDebugCoverageUnitTest(dependsOn: ['instrument', 'testDebugUnitTest']) {
    doLast {
        ant.taskdef(name: 'report',
                classname: 'org.jacoco.ant.ReportTask',
                classpath: configurations.jacocoAnt.asPath)
        ant.report() {
            executiondata {
                ant.file(file: "$buildDir.path/jacoco/testDebugUnitTest.exec")
            }
            structure(name: 'TestCoverage') {
                classfiles {
                    fileset(
                            dir: "$buildDir/intermediates/javac/debug/classes",
                            excludes: '**/R.class,**/R$*.class,**/BuildConfig.*'
                    )
                }
                sourcefiles {
                    fileset(dir: 'src/main/java')
                }
            }

            //html(destdir: "$buildDir.path/reports/tests/jacocoDebugUnitTest")
            csv(destfile: "$buildDir.path/test-results/jacoco.csv")
            //xml(destfile: "$buildDir.path/test-results/jacoco.xml")
        }
    }
}

/*
 * Part of the Offline Instrumentation process is to add the jacoco runtime to the class path along with the path of the instrumented files.
 */
gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(instrument)) {
        tasks.withType(Test) {
            doFirst {
                systemProperty 'jacoco-agent.destfile', buildDir.path + '/jacoco/testDebugUnitTest.exec'
                classpath = files(offline_instrumented_outputDir) + classpath + configurations.jacocoRuntime
            }
        }
    }
}

/*
 *  Instruments the classes per se
 */
task instrument(dependsOn: 'compileDebugUnitTestSources') {
    doLast {
        ant.taskdef(name: 'instrument',
                classname: 'org.jacoco.ant.InstrumentTask',
                classpath: configurations.jacocoAnt.asPath)

        ant.instrument(destdir: offline_instrumented_outputDir) {
            fileset(dir: "$buildDir.path/intermediates/javac/debug/classes")
        }
    }
}
